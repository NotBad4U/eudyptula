From 714e7176a52986f0ac16473c7265c805158c6773 Mon Sep 17 00:00:00 2001
From: NotBad4U <lightplay8@gmail.com>
Date: Wed, 12 Jul 2017 15:37:05 +0200
Subject: [03fe7baeaee0] [PATCH 02/02] Task 08: add foo file

---
 task_8/hello.c | 56 ++++++++++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 50 insertions(+), 6 deletions(-)

diff --git a/task_8/hello.c b/task_8/hello.c
index 1a4510a..09e6694 100644
--- a/task_8/hello.c
+++ b/task_8/hello.c
@@ -2,18 +2,62 @@
 #include <linux/kernel.h>
 #include <linux/debugfs.h>
 #include <linux/jiffies.h>
+#include <linux/semaphore.h>
 #include <linux/errno.h>
 
+
 #define MY_ID "03fe7baeaee0"
-#define MY_ID_LEN 13	// ID length including the final NULL
+#define MY_ID_LEN 13
 
 #define PERM_rw_r__r__	0644
 #define PERM_r__r__r__	0444
 #define PERM_rw_rw_rw_	0666
 
-// This directory entry will point to `/sys/kernel/debug/eudyptula`.
+DEFINE_SEMAPHORE(foo);
+
+// This directory entry will point to /sys/kernel/debug/eudyptula
 static struct dentry *eudyptula_dir;
 
+static int data_len;
+static char data[PAGE_SIZE];
+
+static ssize_t foo_read(struct file *f, char *buffer,
+			size_t buffer_size, loff_t *loff)
+{
+	ssize_t res = 0;
+
+	down(&foo);
+	res = simple_read_from_buffer(buffer, buffer_size, loff, data, data_len);
+	up(&foo);
+
+	return res;
+}
+
+static ssize_t foo_write(struct file *f, const char *buffer,
+			size_t buffer_size, loff_t *loff)
+{
+	ssize_t res = 0;
+
+	if (buffer_size > PAGE_SIZE)
+		buffer_size = PAGE_SIZE;
+
+	down(&foo);
+	res = simple_write_to_buffer(data, PAGE_SIZE, loff, buffer, buffer_size);
+
+	if (res > 0)
+		data_len = res;
+
+	up(&foo);
+
+	return res;
+}
+
+static const struct file_operations foo_ops = {
+	.owner = THIS_MODULE,
+	.read = foo_read,
+	.write = foo_write,
+};
+
 static ssize_t id_read(struct file *f, char *buffer,
 			size_t buffer_size, loff_t *loff)
 {
@@ -55,8 +99,10 @@ static int __init hello_init(void)
 	if (!eudyptula_dir)
 		return -ENOENT;
 
+
 	if (!debugfs_create_file("id", PERM_rw_rw_rw_, eudyptula_dir, NULL, &id_ops) ||
-		!debugfs_create_u64("jiffies", PERM_r__r__r__, eudyptula_dir, (u64 *)&jiffies)) {
+		!debugfs_create_u64("jiffies", PERM_r__r__r__, eudyptula_dir, (u64 *)&jiffies) ||
+		!debugfs_create_file("foo", PERM_rw_r__r__, eudyptula_dir, NULL, &foo_ops)) {
 
 		debugfs_remove_recursive(eudyptula_dir);
 		return -ENOENT;
@@ -68,8 +114,6 @@ static int __init hello_init(void)
 
 static void __exit hello_exit(void)
 {
-	// When the module is unloaded, all of the debugfs files are cleaned
-	// up, and any memory allocated is freed, for all submissions.
 	debugfs_remove_recursive(eudyptula_dir);
 }
 
@@ -78,4 +122,4 @@ module_exit(hello_exit);
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("03fe7baeaee0");
-MODULE_DESCRIPTION("task 8");
\ No newline at end of file
+MODULE_DESCRIPTION("task 8");
-- 
2.7.4

